<?php


namespace Tests\Unit;

use App\Entities\{Setting as SettingEntity, Setting, User as UserEntity, Wallet as WalletEntity};
use App\Exceptions\Api\ForbiddenException;
use App\Helpers\Facades\TokenFacade;
use App\Repositories\{SettingRepository, TransactionRepository, WalletRepository};
use App\Services\TransactionService;
use App\Services\WalletService;
use Tests\TestCase;

/**
 * Class UserServiceTest responsible for the test of the class {@see WalletService}.
 * @package Tests\Unit
 *
 *
 * TODO: I know that a few methods in this class could be improved to don't duplicate the code.
 * (Anyway, I think the tests are clear and good).
 *
 * @author Gabriel Anhaia <anhaia.gabriel@gmail.com>
 */
class WalletServiceTest extends TestCase
{
    /**
     * Test error trying to create a new wallet when the limit of wallets is exceeded.
     * (Without the setting 'max_wallets_user').
     */
    public function testCreateWalletErrorCreatingMoreThanTheWalletsLimitWithOutSettings()
    {
        $userId = 2321234221421;
        $userEntity = new UserEntity($userId);
        $walletEntity = new WalletEntity;
        $walletEntity->setUser($userEntity);

        $walletRepositoryMock = \Mockery::mock(WalletRepository::class);
        $walletRepositoryMock->shouldReceive('getTotalWalletsUser')
            ->once()
            ->with($userId)
            ->andReturn(10);

        $transactionServiceMock = \Mockery::mock(TransactionService::class);

        $settingRepositoryMock = \Mockery::mock(SettingRepository::class);
        $settingRepositoryMock->shouldReceive('getSetting')
            ->once()
            ->with('max_wallets_user')
            ->andReturnNull();

        $this->expectException(ForbiddenException::class);
        $this->expectExceptionMessage("You can't have more than 10 wallets.");

        $walletService = new WalletService($transactionServiceMock, $walletRepositoryMock, $settingRepositoryMock);
        $walletService->createWallet($walletEntity);
    }

    /**
     * Test error trying to create a new wallet when the limit of wallets is exceeded.
     * (With the setting 'max_wallets_user').
     */
    public function testCreateWalletErrorCreatingMoreThanTheWalletsLimitWithSettings()
    {
        $totalWalletsUser = 999;
        $maxWalletsUser = 999;

        $maxWalletsUserSetting = new SettingEntity;
        $maxWalletsUserSetting->setValue($maxWalletsUser);

        $userId = 2321234221421;
        $userEntity = new UserEntity($userId);
        $walletEntity = new WalletEntity;
        $walletEntity->setUser($userEntity);

        $walletRepositoryMock = \Mockery::mock(WalletRepository::class);
        $walletRepositoryMock->shouldReceive('getTotalWalletsUser')
            ->once()
            ->with($userId)
            ->andReturn($totalWalletsUser);

        $transactionServiceMock = \Mockery::mock(TransactionService::class);

        $settingRepositoryMock = \Mockery::mock(SettingRepository::class);
        $settingRepositoryMock->shouldReceive('getSetting')
            ->once()
            ->with('max_wallets_user')
            ->andReturn($maxWalletsUserSetting);


        $this->expectException(ForbiddenException::class);
        $this->expectExceptionMessage("You can't have more than {$maxWalletsUser} wallets.");

        $walletService = new WalletService($transactionServiceMock, $walletRepositoryMock, $settingRepositoryMock);
        $walletService->createWallet($walletEntity);
    }

    /**
     * Test success creating a wallet in the following scenario:
     *
     * 1. Name not auto generated.
     * 2. It's not the first wallet (user), in this way he will not receive a bonus.
     */
    public function testCreateWalletNameNotAutoGeneratedAndNotFirstWallet()
    {
        $userId = 2321234221421;
        $walletName = 'MY_CUSTOM_NAME_WALLET';
        $walletId = 34324344334;
        $userEntity = new UserEntity($userId);
        $walletEntity = new WalletEntity($walletId);
        $walletEntity->setUser($userEntity)
            ->setName($walletName);

        $walletRepositoryMock = \Mockery::mock(WalletRepository::class);
        $walletRepositoryMock->shouldReceive('getTotalWalletsUser')
            ->once()
            ->with($userId)
            ->andReturn(9);

        $transactionServiceMock = \Mockery::mock(TransactionService::class);
        $transactionServiceMock->shouldReceive('creditAmount')
            ->never();

        $settingRepositoryMock = \Mockery::mock(SettingRepository::class);
        $settingRepositoryMock->shouldReceive('getSetting')
            ->once()
            ->with('max_wallets_user')
            ->andReturnNull();


        $walletAddress = '1B65T1CnLP3eta8ZQYJN2u3G3wukvQwkAS';
        TokenFacade::shouldReceive('generateWalletAddress')
            ->once()
            ->withNoArgs()
            ->andReturn($walletAddress);

        $walletEntityExpectedResult = clone $walletEntity;
        $walletEntityExpectedResult->setAddress($walletAddress);

        $walletRepositoryMock->shouldReceive('createWallet')
            ->once()
            ->with($walletEntity);

        $walletService = new WalletService($transactionServiceMock, $walletRepositoryMock, $settingRepositoryMock);
        $walletEntityResult = $walletService->createWallet($walletEntity);

        $this->assertEquals($walletEntityExpectedResult, $walletEntityResult);
    }

    /**
     * Test success creating a wallet in the following scenario:
     *
     * 1. Name auto generated by the system.
     * 2. It's not the first wallet (user), in this way he will not receive a bonus.
     */
    public function testCreateWalletNamAutoGeneratedAndNotFirstWallet()
    {
        $userId = 2321234221421;
        $walletId = 34324344334;
        $userEntity = new UserEntity($userId);
        $walletEntity = new WalletEntity($walletId);
        $walletEntity->setUser($userEntity);

        $walletRepositoryMock = \Mockery::mock(WalletRepository::class);
        $walletRepositoryMock->shouldReceive('getTotalWalletsUser')
            ->once()
            ->with($userId)
            ->andReturn(9);

        $transactionServiceMock = \Mockery::mock(TransactionService::class);
        $transactionServiceMock->shouldReceive('creditAmount')
            ->never();

        $settingRepositoryMock = \Mockery::mock(SettingRepository::class);
        $settingRepositoryMock->shouldReceive('getSetting')
            ->once()
            ->with('max_wallets_user')
            ->andReturnNull();

        $randomWalletHash = '3f3G34';
        $walletNameAutoGenerated = "Wallet {$randomWalletHash}";
        TokenFacade::shouldReceive('random')
            ->once()
            ->with(6)
            ->andReturn($randomWalletHash);

        $walletAddress = '1B65T1CnLP3eta8ZQYJN2u3G3wukvQwkAS';
        TokenFacade::shouldReceive('generateWalletAddress')
            ->once()
            ->withNoArgs()
            ->andReturn($walletAddress);

        $walletEntityExpectedResult = clone $walletEntity;
        $walletEntityExpectedResult->setAddress($walletAddress)
            ->setName($walletNameAutoGenerated);

        $walletRepositoryMock->shouldReceive('createWallet')
            ->once()
            ->with($walletEntity);

        $walletService = new WalletService($transactionServiceMock, $walletRepositoryMock, $settingRepositoryMock);
        $walletEntityResult = $walletService->createWallet($walletEntity);

        $this->assertEquals($walletEntityExpectedResult, $walletEntityResult);
    }

    /**
     * Test success creating a wallet in the following scenario:
     *
     * 1. Name not auto generated.
     * 2. Its the first wallet (user), in this way he will receive a bonus (1 BTC).
     */
    public function testCreateWalletNameNotAutoGeneratedAndFirstWallet()
    {
        $userId = 2321234221421;
        $walletName = 'MY_CUSTOM_NAME_WALLET';
        $walletId = 34324344334;
        $userEntity = new UserEntity($userId);
        $walletEntity = new WalletEntity($walletId);
        $walletEntity->setUser($userEntity)
            ->setName($walletName);

        $walletRepositoryMock = \Mockery::mock(WalletRepository::class);
        $walletRepositoryMock->shouldReceive('getTotalWalletsUser')
            ->once()
            ->with($userId)
            ->andReturn(0);

        $transactionServiceMock = \Mockery::mock(TransactionService::class);
        $transactionServiceMock->shouldReceive('creditAmount')
            ->never();

        $settingRepositoryMock = \Mockery::mock(SettingRepository::class);
        $settingRepositoryMock->shouldReceive('getSetting')
            ->once()
            ->with('max_wallets_user')
            ->andReturnNull();

        $walletAddress = '1B65T1CnLP3eta8ZQYJN2u3G3wukvQwkAS';
        TokenFacade::shouldReceive('generateWalletAddress')
            ->once()
            ->withNoArgs()
            ->andReturn($walletAddress);

        $walletEntityExpectedResult = clone $walletEntity;
        $walletEntityExpectedResult->setAddress($walletAddress);

        $settingBonusBitCoinsFirstWallet = new SettingEntity;
        $settingBonusBitCoinsFirstWallet->setValue('10000000');
        $settingRepositoryMock->shouldReceive('getSetting')
            ->once()
            ->with('bonus_bitcoin_first_wallet')
            ->andReturn($settingBonusBitCoinsFirstWallet);

        $totalBitCoins = (int)$settingBonusBitCoinsFirstWallet->getValue();
        $transactionServiceMock->shouldReceive('creditAmount')
            ->once()
            ->with($walletEntity, $totalBitCoins, 'Bonus first wallet.');

        $walletRepositoryMock->shouldReceive('createWallet')
            ->once()
            ->with($walletEntity);

        $walletService = new WalletService($transactionServiceMock, $walletRepositoryMock, $settingRepositoryMock);
        $walletEntityResult = $walletService->createWallet($walletEntity);

        $this->assertEquals($walletEntityExpectedResult, $walletEntityResult);
    }

    /**
     * Test success finding wallet by address.
     */
    public function testFindWalletByAddress()
    {
        $walletAddress = '43sksdSDAdsaidjasji324343fDsasdsa';

        $walletEntity = new WalletEntity(2323);
        $walletEntity->setName('NAME')
            ->setAddress($walletAddress)
            ->setUser(new UserEntity(3342));

        $walletRepositoryMock = \Mockery::mock(WalletRepository::class);
        $walletRepositoryMock->shouldReceive('findWalletByAddress')
            ->once()
            ->with($walletAddress)
            ->andReturn($walletEntity);

        $transactionService = \Mockery::mock(TransactionService::class);
        $settingRepository = \Mockery::mock(SettingRepository::class);

        $walletService = new WalletService($transactionService, $walletRepositoryMock, $settingRepository);

        $result = $walletService->findWalletByAddress($walletAddress);

        $this->assertEquals($walletEntity, $result);
    }
}
